generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Prospect {
  id          String   @id @default(uuid())
  email       String   @unique
  nom         String
  prenom      String
  telephone   String
  adresse     String
  facture     Int
  equipements String[]
  rapport     String?
  createdAt   DateTime @default(now())
}

model User {
  phone           String?
  email           String?         @unique
  address         String?
  postalCode      String?
  city            String?
  createdAt       DateTime        @default(now())
  id              String          @id @default(uuid())
  sessionId       String          @unique
  country         String?
  updatedAt       DateTime        @updatedAt
  status          String
  consumptionType String?
  electricity     String?
  latitude        Float?
  longitude       Float?
  firstName       String?
  lastName        String?
  solarEstimates  SolarEstimate[]
  userContacts    UserContact[]  
}

model SolarEstimate {
  id                            String   @id @default(uuid())
  userId                        String
  latitude                      Float
  longitude                     Float
  postalCode                    String?
  maxArrayPanelsCount           Int
  maxArrayAreaMeters2           Float
  maxSunshineHoursPerYear       Int
  yearlyEnergyDcKwh             Float
  yearlyEnergyAcKwh             Float
  installationSizeKw            Float
  installationCost              Float
  panelsCount                   Int
  roofTilt                      Float?
  roofOrientation               String?
  panelCoordinates              Json?
  percentageExportedToGrid      Float
  solarPercentage               Float
  costOfElectricityWithoutSolar Float
  remainingLifetimeUtilityBill  Float
  monthlyProduction             Json?  // ðŸŒž Stocke les donnÃ©es mensuelles de production
  savingsLifetime               Float
  paybackYears                  Float
  firstYearSavings              Float
  firstYearSavingsWithoutSell   Float
  firstYearSavingsWithSell      Float
  savingsLifetimeWithSell       Float  // ðŸ’¡ Nouveau champ pour l'affichage sur 25 ans avec revente
  savingsLifetimeWithoutSell    Float
  loanMonthlyPayment            Float? // Simulation prÃªt
  loanDurationYears             Int?   // Simulation prÃªt
  createdAt                     DateTime @default(now())
  user                          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Nouveau modÃ¨le pour les administrateurs
model Admin {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  lastLoginAt  DateTime?
  adminLogs    AdminLog[]
  userContacts UserContact[]
}

// Nouveau modÃ¨le pour les logs des actions d'administrateurs
model AdminLog {
  id          String   @id @default(uuid())
  adminId     String
  action      String
  details     String?
  ipAddress   String?
  createdAt   DateTime @default(now())
  admin       Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

// Nouveau modÃ¨le pour suivre les contacts avec les utilisateurs
model UserContact {
  id            String   @id @default(uuid())
  userId        String
  adminId       String
  contactMethod String   // EMAIL, PHONE, MANUAL, etc.
  notes         String?
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  admin         Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
}